## Data model overview

### Users

A user represents a set of permissions relating to what data can be seen. To  access data in JMAP, you first authenticate as a particular user.

### Accounts

All data belongs to an account. An account may contain mail, contacts, calendars and potentially other data in the future or with custom extensions. Most operations are isolated to a single account; there are a few explicit operations to copy data between them.

An account is not the same as a user, although it is common for the primary account to directly belong to the user. For example, you may have an account that contains data for a group or business, to which multiple users have access. Users may also have access to accounts belonging to another user if that user is sharing some of their data.

### Ids

All record ids are assigned by the server, and are immutable. They MUST be unique among all records of the **same type** within the **same account**. Ids may clash across accounts, or for two records of different types within the same account.

Ids are always `String`s. An id MUST be a valid utf-8 string of at least one character in length, but MUST NOT start with the `#` character, as this is reserved for doing back references during record creation (see the *setFoos* description).

### Mail

A mailbox is a named, arbitrary set of messages. For compatibility with IMAP, a message MUST belong to one or more mailboxes. The message id does not change if the message changes mailboxes.

Each message has 4 mutable boolean "flags" stored with it, each with a direct
equivalent in IMAP. In JMAP these flags are called:

* **isUnread**: Has the email not yet been read?
* **isFlagged**: Has the email been flagged (also known as starred, or pinned)?
* **isDraft**: Is the email a draft?
* **isAnswered**: Has the email been answered (replied to)?

Messages are **immutable** other than these 4 flags and the set of mailboxes to which it belongs. To change anything else, the message must be deleted and a new one created (which will get a different id).

Related messages are grouped into threads. When getting a message list you can collapse threads, which means the thread is only returned **once**, at the position of the first message in the thread in the non-collapsed list (given the sort order).

### Contacts

The contacts API is designed to be compatible with existing CardDAV systems. Each contact must have a unique, immutable id. A contact can be assigned to contact groups in a many-to-many relationship. A group is simply a named set of contacts.

### Calendars

The calendars API is designed to be compatible with existing CalDAV systems. An event must belong to a single calendar.
