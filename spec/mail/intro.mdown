# Introduction

JMAP <https://tools.ietf.org/html/draft-ietf-jmap-core-05> is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification defines a data model for synchronising mail between a client and a server using JMAP.

## Notational conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [@!RFC2119].

Type signatures, examples and property descriptions in this document follow the conventions established in Section 1.1 of <https://tools.ietf.org/html/draft-ietf-jmap-core-05>.

Object properties may also have a set of attributes defined along with the type
signature. These have the following meanings:

* **server-set**: Only the server can set the value for this property. The
  client MUST NOT send this property when creating a new object of this type.
* **immutable**: The value MUST NOT change after the object is created.
* **default**: (This is followed by a JSON value). The value that will be used
  for this property if it is omitted in an argument, or when creating a new object of this type.

Data types defined in the core specification are used in this document.

## Terminology

The same terminology is used in this document as in the core JMAP specification.

## Addition to the capabilities object

The capabilities object is returned as part of the standard JMAP Session object; see the JMAP spec. Servers supporting *this* specification MUST add a property called `urn:ietf:params:jmap:mail` to the capabilities object. The value of this property is an object which MUST contain the following information on server capabilities:

- **maxMailboxesPerEmail**: `PositiveInt|null`
  The maximum number of mailboxes that can be can assigned to a single email. This MUST be an integer >= 1, or `null` for no limit (or rather, the limit is always the number of mailboxes in the account).
- **maxSizeAttachmentsPerEmail**: `PositiveInt`
  The maximum total size of attachments, in octets, allowed for a single email. A server MAY still reject emails with a lower attachment size total (for example, if the body includes several megabytes of text, causing the size of the encoded MIME structure to be over some server-defined limit).

    Note, this limit is for the sum of unencoded attachment sizes. Users are generally not knowledgeable about encoding overhead etc., nor should they need to be, so services marketing and help materials normally tells them the "max size attachments". This is the unencoded size they see on their hard drive, and so this capability matches that and allows the client to consistently enforce what the user understands as the limit.

    The server may separately have a limit for the total size of the RFC5322 message, which will have attachments Base64 encoded and message headers and bodies too. For example, suppose the server advertises `maxSizeAttachmentsPerEmail: 50000000` (50 MB). The enforced server limit may be for an RFC5322 size of 70000000 octets (70 MB). Even with Base64 encoding and a 2 MB HTML body, 50 MB attachments would fit under this limit.

- **maxDelayedSend**: `PositiveInt`
  The number in seconds of the maximum delay the server supports in sending
  (see the EmailSubmission object). This is `0` if the server does not support
  delayed send.
- **emailsListSortOptions**: `String[]`
  A list of all the email properties the server supports for sorting by. This MAY include properties the client does not recognise (for example custom properties specified in a vendor extension). Clients MUST ignore any unknown properties in the list.
- **submissionExtensions**: `String[String[]]`
  A JMAP implementation that talks to a Submission [@!RFC6409] server SHOULD have a configuration setting that allows an administrator to expose a new submission EHLO capability in this field. This allows a JMAP server to gain access to a new submission extension without code changes. By default, the JMAP server should show only known safe-to-expose EHLO capabilities in this field, and hide EHLO capabilities that are only relevant to the JMAP server.

    Each key in the object is the *ehlo-name*, and the value is a list of *ehlo-args*.

    Examples of safe-to-expose Submission extensions include:

    - FUTURERELEASE ([@!RFC4865])
    - SIZE ([@!RFC1870])
    - DSN ([@!RFC3461])
    - DELIVERYBY ([@!RFC2852])
    - MT-PRIORITY ([@!RFC6710])

    A JMAP server MAY advertise an extension and implement the semantics of that extension locally on the JMAP server even if a submission server used by JMAP doesn't implement it.

    The full IANA registry of submission extensions can be found at https://www.iana.org/assignments/mail-parameters/mail-parameters.xhtml#mail-parameters-2

The server MUST also include the string `urn:ietf:params:jmap:mail` in the *hasDataFor* property of any account in which the user may use the data types contained in this specification.

## Push

Servers MUST support the standard JMAP push mechanisms to receive notifications when the state changes for any of the types defined in this specification.

In addition, servers MUST support a psuedo-type called "EmailDelivery" in the push mechanisms. The state string for this MUST change whenever a new Email is added to the store, but SHOULD NOT change upon any other change to the Email objects.

Clients in battery constrained environments may wish to delay fetching changes initiated by the user, but fetch new messages immediately so they can notify the user.
