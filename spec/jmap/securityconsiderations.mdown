# Security considerations

## Transport confidentiality

All HTTP requests MUST use [@!RFC5246] TLS (https) transport to ensure the confidentiality of data sent and received via JMAP. Clients MUST validate TLS certificate chains to protect against man-in-the-middle attacks.

## Authentication scheme

A number of HTTP authentication schemes have been standardised (https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml). Servers should take care to assess the security characteristics of different schemes in relation to their needs when deciding what to implement.

If offering the Basic authentication scheme, services are strongly recommended  to not allow a user's regular password but require generation of a unique "app password" via some external mechanism for each client they wish to connect. This allows connections from different devices to be differentiated by the server, and access to be individually revoked.

## Service autodiscovery

Unless secured by something like DNSSEC, autodiscovery of server details is
vulnerable to a DNS poisoning attack leading to the client talking to an attacker's server instead of the real JMAP server. The attacker may then man-in-the-middle requests and depending on the authentication scheme, steal credentials to generate its own requests.

Clients that do not support SRV lookups are likely to try just using the `/.well-known/jmap` path directly against the domain of the username over HTTPS. Servers SHOULD ensure this path resolves or redirects to the correct JMAP session resource to allow this to work. If this is not feasible, servers MUST ensure this path cannot be controlled by an attacker, as again it may be used to steal credentials.

## JSON parsing

The security considerations of [@!RFC7159] apply to the use of JSON as the data interchange format.

## Denial of service

A small request may result in a very large response, and require considerable
work on the server if resource limits are not enforced. JMAP provides mechanisms for advertising and enforcing a wide variety of limits for mitigating this threat, including limits on number of objects fetched in a single method call, number of methods in a single request, number of concurrent requests, etc.

JMAP servers MUST implement sensible limits to mitigate against resource exhaustion attacks.

## Push encryption

When data changes, a small object is pushed with the new state strings for the types that have changed. While the data here is minimal, a passive man-in-the-middle attacker may be able to gain useful information. To ensure confidentiality, if the push is sent via a third party outside of the control of the client and JMAP server the client MUST specify encryption keys when establishing the PushSubscription.

The privacy and security considerations of [@!RFC8030] and <https://tools.ietf.org/html/draft-ietf-webpush-encryption-09> also all apply to the use of the PushSubscription mechanism.
