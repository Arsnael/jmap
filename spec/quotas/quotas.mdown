# Introduction

JMAP ([@!RFC8620] – JSON Meta Application Protocol) is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification defines a data model for handling mail quotas over JMAP, allowing you to read and explain quota information.

This specification does not address quota administration, which should be handled by other means.

## Notational conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14 [@!RFC2119] [@!RFC8174] when, and only when, they appear in all
capitals, as shown here.

Type signatures, examples and property descriptions in this document follow the conventions established in section 1.1 of [@!RFC8620]. Data types defined in the core specification are also used in this document.

Servers MUST support all properties specified for the new data types defined in this document.

## Terminology

### Quota

A quota is a numeric upper limit that the server is enforcing. Quotas are applied to JMAP Mailbox objects.

## Addition to the capabilities object

The capabilities object is returned as part of the JMAP Session object; see [@!RFC8620], section 2.

This document defines one additional capability URI.

### urn::ietf::params::jmap::quota

This represents support for the Quota data type and associated API methods. Servers supporting this specification MUST add this property to the capabilities object.

# Quota definition

The quota is an object that displays the limit set to a mailbox usage as well as the current usage in regard to that limit.

## The Scope Data Type

The **Scope** is a `String` from an enumeration defined list of values, handled by the server.

It explains the entities this value applies to. Some custom specifications might provide some additional values. If the client does not specify custom scope specifications in the "using" parameter of the request, the server should respond the JSON value `null`, instead of answering a scope value that the client does not support. Standard values are:
* `account`: Applies for this account
* `domain`: All users of this domain share this part of the quota
* `global`: All users of this mail server share this part of the quota

## The ResourceType Data Type

The **ResourceType** is a `String` from an enumeration defined list of values, handled by the server.

A resource type is like an unit of measure for the quota usage. Some custom specifications might provide some additional values. If the client does not specify custom resource type specifications in the "using" parameter of the request, the server should respond the JSON value `null`, instead of answering a resource type value that the client does not support. Standard values are:
* `count`: The quota is measured in number of data type objects. For example, a quota can have a limit of 50 `Mail` objects.
* `size`: The quota is measured in size. The default unit is in `bytes`, but a server can decide of the unit it wants to use (like in `octets`). For example, a quota can have a limit of 25000 `bytes`

## The Quota Object

The quota object MUST contain the following fields:

* **id**: `Id` The unique identifier for this object. It should respect the JMAP ID datatype defined in section 1.2 of [@!RFC8620]

* **resourceType**: `ResourceType` The resource type of the quota.

* **used**: `UnsignedInt` The current usage of the mailbox. Computation of this value is handled by the server.

* **limit**: `UnsignedInt` The hard limit set by this quota object. No more outgoing and ingoing messages should be allowed if we reach this limit. It should higher than the `warnLimit` and the `softLimit`.

* **scope**: `Scope` The `Scope` of this quota.

* **name**: `String` The name of the quota object. Useful for managing quotas and use queries for searching.

* **datatypes**: `String[]` A list of all the data types values that are applying to this quota. This allows to assign quotas to separated or shared data types. This MAY include data types the client does not recognise. Clients MUST ignore any unknown data type in the list.

The quota object MAY contain the following field:

* **warnLimit**: `UnsignedInt|null` The warn limit set by this quota object. It can be used to send a warning to a user that he is going to reach the hard limit soon, but no action is taken. If set, it should be lower than the `softLimit` and the `limit`.

* **softLimit**: `UnsignedInt|null` The soft limit set by this quota object. It can be used to block outgoing messages, but still allow incoming messages. If set, it should be higher than the `warnLimit` but lower than the `limit`.

* **description**: `String|null` Arbitrary free, human readable, description of this quota. Might be used to explain where the limit comes from and explain the entities this quota applies to.

## Example

    {
      "id": "2a06df0d-9865-4e74-a92f-74dcc814270e",
      "resourceType": "count",
      "used": 1056,
      "warnLimit": 1600,
      "softLimit": 1800,
      "limit": 2000,
      "scope": "account",
      "name": "bob@example.com",
      "description": "Personal account usage, bounded by a domain limit",
      "datatypes" : [ "Mail", "Calendar", "Contact" ]
    }

## Quota/get

Standard “/get” method as described in [@!RFC8620] section 5.1. The ids argument may be `null` to fetch all at once.

### Example

Request fetching all quotas related to an account :

    [[ "Quota/get", {
      "accountId": "u33084183",
      "ids": null
    }, "0" ]]

With response :

    [[ "Quota/get", {
      "accountId": "u33084183",
      "state": "78540",
      "list": [{
      "id": "2a06df0d-9865-4e74-a92f-74dcc814270e",
      "resourceType": "count",
      "used": 1056,
      "warnLimit": 1600,
      "softLimit": 1800,
      "limit": 2000,
      "scope": "account",
      "name": "bob@example.com",
      "description": "Personal account usage, bounded by a domain limit",
      "datatypes" : [ "Mail", "Calendar", "Contact" ]
      }, {
        "id": "3b06df0e-3761-4s74-a92f-74dcc963501x",
        "type": "messageStorageSize",
        ...
      }, ...],
      "notFound": []
    }, "0" ]]


## Quota/changes

Standard “/changes” method as described in [@!RFC8620] section 5.2.

### Example

Request:

    [[ "Quota/changes", {
      "accountId": "u33084183",
      "sinceState": "10824",
      "maxChanges": 20
    }, "0" ]

Response:

    [[ "Quota/changes", {
      "accountId": "u33084183",
      "oldState": "10824",
      "newState": "10826",
      "hasMoreChanges": false,
      "created": [],
      "updated": ["2a06df0d-9865-4e74-a92f-74dcc814270e"],
      "destroyed": []
    }, "0" ],
    ... ]

# Addition to the Mailbox object

The following extra property is defined:

* **quotaIds:** `Id[]` (default: `[]`) A list of quota ids bound to that mailbox, or `[]` if that mailbox has no quota restrictions. This value is server-set.

# Security considerations

All security considerations of JMAP ([@!RFC8620]) apply to this specification.

# IANA Considerations

## JMAP Capability Registration for "quota"

IANA will register the "quota" JMAP Capability as follows:

Capability Name: `urn:ietf:params:jmap:quota`

Specification document: this document

Intended use: common

Change Controller: IETF

Security and privacy considerations: this document, section 4.

